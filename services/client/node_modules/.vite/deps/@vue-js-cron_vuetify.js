import {
  plugin,
  script$1
} from "./chunk-SETMXEOR.js";
import {
  Fragment,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createSlots,
  createTextVNode,
  createVNode,
  guardReactiveProps,
  mergeProps,
  normalizeProps,
  openBlock,
  renderList,
  resolveComponent,
  toDisplayString,
  toHandlers,
  withCtx,
  withModifiers
} from "./chunk-G4DFXOZZ.js";
import "./chunk-OL3AADLO.js";

// node_modules/@vue-js-cron/vuetify/dist/vuetify.esm.js
var script$12 = {
  inheritAttrs: false,
  components: {
    RenderlessSelect: script$1
  },
  name: "CustomSelect",
  props: {
    menuProps: {
      type: Object,
      default: () => {
      }
    },
    chipProps: {
      type: Object,
      default: () => {
      }
    }
  },
  emits: ["update:model-value"]
};
function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_v_icon = resolveComponent("v-icon");
  const _component_v_list_item = resolveComponent("v-list-item");
  const _component_v_col = resolveComponent("v-col");
  const _component_v_row = resolveComponent("v-row");
  const _component_v_list = resolveComponent("v-list");
  const _component_v_menu = resolveComponent("v-menu");
  const _component_v_chip = resolveComponent("v-chip");
  const _component_renderless_select = resolveComponent("renderless-select");
  return openBlock(), createBlock(
    _component_renderless_select,
    mergeProps(_ctx.$attrs, {
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.$emit("update:model-value", $event))
    }),
    {
      default: withCtx(({ selectedStr, itemRows, select, isSelected, clearable, clear }) => [
        createVNode(
          _component_v_chip,
          normalizeProps(guardReactiveProps($props.chipProps)),
          createSlots({
            default: withCtx(() => [
              createTextVNode(
                " " + toDisplayString(selectedStr) + " ",
                1
                /* TEXT */
              ),
              createVNode(
                _component_v_menu,
                mergeProps({ activator: "parent" }, $props.menuProps),
                {
                  default: withCtx(() => [
                    createVNode(
                      _component_v_list,
                      { class: "pa-0 ma-0" },
                      {
                        default: withCtx(() => [
                          (openBlock(true), createElementBlock(
                            Fragment,
                            null,
                            renderList(itemRows, (itemRow, index) => {
                              return openBlock(), createBlock(
                                _component_v_row,
                                {
                                  key: index,
                                  "no-gutters": ""
                                },
                                {
                                  default: withCtx(() => [
                                    (openBlock(true), createElementBlock(
                                      Fragment,
                                      null,
                                      renderList(itemRow, (item, index2) => {
                                        return openBlock(), createBlock(
                                          _component_v_col,
                                          { key: index2 },
                                          {
                                            default: withCtx(() => [
                                              item ? (openBlock(), createBlock(_component_v_list_item, {
                                                key: 0,
                                                class: "vcron-v-item",
                                                onClick: ($event) => select(item),
                                                active: isSelected(item)
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(
                                                    toDisplayString(item.text),
                                                    1
                                                    /* TEXT */
                                                  )
                                                ]),
                                                _: 2
                                                /* DYNAMIC */
                                              }, 1032, ["onClick", "active"])) : createCommentVNode("v-if", true)
                                            ]),
                                            _: 2
                                            /* DYNAMIC */
                                          },
                                          1024
                                          /* DYNAMIC_SLOTS */
                                        );
                                      }),
                                      128
                                      /* KEYED_FRAGMENT */
                                    ))
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                },
                                1024
                                /* DYNAMIC_SLOTS */
                              );
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        _: 2
                        /* DYNAMIC */
                      },
                      1024
                      /* DYNAMIC_SLOTS */
                    )
                  ]),
                  _: 2
                  /* DYNAMIC */
                },
                1040
                /* FULL_PROPS, DYNAMIC_SLOTS */
              )
            ]),
            _: 2
            /* DYNAMIC */
          }, [
            clearable ? {
              name: "append",
              fn: withCtx(() => [
                createVNode(_component_v_icon, {
                  size: "small",
                  icon: "mdi-close",
                  onClick: withModifiers(($event) => clear(), ["stop"])
                }, null, 8, ["onClick"])
              ])
            } : void 0
          ]),
          1040
          /* FULL_PROPS, DYNAMIC_SLOTS */
        )
      ]),
      _: 1
      /* STABLE */
    },
    16
    /* FULL_PROPS */
  );
}
script$12.render = render$1;
script$12.__file = "src/components/CustomSelect.vue";
var script = {
  name: "VueCronEditor",
  components: {
    CronCore: plugin.component,
    CustomSelect: script$12
  },
  props: {
    chipProps: {
      type: Object,
      default() {
        return {};
      }
    },
    cols: {
      type: Object,
      default: () => {
        return {
          minute: 5,
          hour: 4,
          day: 4
        };
      }
    }
  },
  emits: ["update:model-value", "error"]
};
var _hoisted_1 = { style: { "display": "inline-block" } };
function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_v_col = resolveComponent("v-col");
  const _component_custom_select = resolveComponent("custom-select");
  const _component_v_row = resolveComponent("v-row");
  const _component_CronCore = resolveComponent("CronCore");
  return openBlock(), createBlock(
    _component_CronCore,
    mergeProps(_ctx.$attrs, {
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.$emit("update:model-value", $event)),
      onError: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("error", $event))
    }),
    {
      default: withCtx(({ fields, period }) => [
        createBaseVNode("div", _hoisted_1, [
          createVNode(
            _component_v_row,
            {
              align: "baseline",
              dense: ""
            },
            {
              default: withCtx(() => [
                period.prefix ? (openBlock(), createBlock(
                  _component_v_col,
                  {
                    key: 0,
                    class: "flex-grow-0"
                  },
                  {
                    default: withCtx(() => [
                      createTextVNode(
                        toDisplayString(period.prefix),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1024
                  /* DYNAMIC_SLOTS */
                )) : createCommentVNode("v-if", true),
                createVNode(
                  _component_v_col,
                  { cols: "auto" },
                  {
                    default: withCtx(() => [
                      createVNode(_component_custom_select, mergeProps(period.attrs, {
                        items: period.items
                      }, toHandlers(period.events), {
                        "item-value": "id",
                        "chip-props": $props.chipProps
                      }), null, 16, ["items", "chip-props"])
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1024
                  /* DYNAMIC_SLOTS */
                ),
                period.suffix ? (openBlock(), createBlock(
                  _component_v_col,
                  {
                    key: 1,
                    class: "flex-grow-0"
                  },
                  {
                    default: withCtx(() => [
                      createTextVNode(
                        toDisplayString(period.suffix),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1024
                  /* DYNAMIC_SLOTS */
                )) : createCommentVNode("v-if", true),
                (openBlock(true), createElementBlock(
                  Fragment,
                  null,
                  renderList(fields, (f) => {
                    return openBlock(), createElementBlock(
                      Fragment,
                      {
                        key: f.id
                      },
                      [
                        f.prefix ? (openBlock(), createBlock(
                          _component_v_col,
                          {
                            key: 0,
                            class: "flex-grow-0"
                          },
                          {
                            default: withCtx(() => [
                              createTextVNode(
                                toDisplayString(f.prefix),
                                1
                                /* TEXT */
                              )
                            ]),
                            _: 2
                            /* DYNAMIC */
                          },
                          1024
                          /* DYNAMIC_SLOTS */
                        )) : createCommentVNode("v-if", true),
                        createVNode(
                          _component_v_col,
                          { cols: "auto" },
                          {
                            default: withCtx(() => [
                              createVNode(_component_custom_select, mergeProps(f.attrs, toHandlers(f.events), {
                                selection: f.selectedStr,
                                cols: $props.cols[f.id],
                                items: f.items,
                                multiple: "",
                                "chip-props": $props.chipProps,
                                "menu-props": { closeOnContentClick: false },
                                clearable: ""
                              }), null, 16, ["selection", "cols", "items", "chip-props"])
                            ]),
                            _: 2
                            /* DYNAMIC */
                          },
                          1024
                          /* DYNAMIC_SLOTS */
                        ),
                        f.suffix ? (openBlock(), createBlock(
                          _component_v_col,
                          {
                            key: 1,
                            class: "flex-grow-0"
                          },
                          {
                            default: withCtx(() => [
                              createTextVNode(
                                toDisplayString(f.suffix),
                                1
                                /* TEXT */
                              )
                            ]),
                            _: 2
                            /* DYNAMIC */
                          },
                          1024
                          /* DYNAMIC_SLOTS */
                        )) : createCommentVNode("v-if", true)
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    );
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ]),
              _: 2
              /* DYNAMIC */
            },
            1024
            /* DYNAMIC_SLOTS */
          )
        ])
      ]),
      _: 1
      /* STABLE */
    },
    16
    /* FULL_PROPS */
  );
}
script.render = render;
script.__file = "src/CronEditor.vue";
function install(Vue) {
  if (install.installed)
    return;
  install.installed = true;
  Vue.component("CronVuetify", script);
}
var plugin2 = {
  install,
  component: script,
  util: plugin.util
};
export {
  script as CronVuetify,
  plugin2 as CronVuetifyPlugin,
  plugin2 as default,
  install
};
//# sourceMappingURL=@vue-js-cron_vuetify.js.map
