(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@vue-js-cron/core'), require('vue')) :
  typeof define === 'function' && define.amd ? define(['exports', '@vue-js-cron/core', 'vue'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vuetify = {}, global.CronCore, global.vue));
})(this, (function (exports, CronCore, vue) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var CronCore__default = /*#__PURE__*/_interopDefaultLegacy(CronCore);

  var script$1 = {
    inheritAttrs: false,
    components: {
      RenderlessSelect: CronCore.RenderlessSelect
    },
    name: 'CustomSelect',
    props: {
      menuProps: {
        type: Object,
        default: () => {}
      },
      chipProps: {
        type: Object,
        default: () => {}
      }
    },
    emits: ['update:model-value']
  };

  function render$1(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_icon = vue.resolveComponent("v-icon");
    const _component_v_list_item = vue.resolveComponent("v-list-item");
    const _component_v_col = vue.resolveComponent("v-col");
    const _component_v_row = vue.resolveComponent("v-row");
    const _component_v_list = vue.resolveComponent("v-list");
    const _component_v_menu = vue.resolveComponent("v-menu");
    const _component_v_chip = vue.resolveComponent("v-chip");
    const _component_renderless_select = vue.resolveComponent("renderless-select");

    return (vue.openBlock(), vue.createBlock(_component_renderless_select, vue.mergeProps(_ctx.$attrs, {
      "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => (_ctx.$emit('update:model-value', $event)))
    }), {
      default: vue.withCtx(({ selectedStr, itemRows, select, isSelected, clearable, clear }) => [
        vue.createVNode(_component_v_chip, vue.normalizeProps(vue.guardReactiveProps($props.chipProps)), vue.createSlots({
          default: vue.withCtx(() => [
            vue.createTextVNode(" " + vue.toDisplayString(selectedStr) + " ", 1 /* TEXT */),
            vue.createVNode(_component_v_menu, vue.mergeProps({ activator: "parent" }, $props.menuProps), {
              default: vue.withCtx(() => [
                vue.createVNode(_component_v_list, { class: "pa-0 ma-0" }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(itemRows, (itemRow, index) => {
                      return (vue.openBlock(), vue.createBlock(_component_v_row, {
                        key: index,
                        "no-gutters": ""
                      }, {
                        default: vue.withCtx(() => [
                          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(itemRow, (item, index) => {
                            return (vue.openBlock(), vue.createBlock(_component_v_col, { key: index }, {
                              default: vue.withCtx(() => [
                                item
                                  ? (vue.openBlock(), vue.createBlock(_component_v_list_item, {
                                      key: 0,
                                      class: "vcron-v-item",
                                      onClick: $event => (select(item)),
                                      active: isSelected(item)
                                    }, {
                                      default: vue.withCtx(() => [
                                        vue.createTextVNode(vue.toDisplayString(item.text), 1 /* TEXT */)
                                      ]),
                                      _: 2 /* DYNAMIC */
                                    }, 1032 /* PROPS, DYNAMIC_SLOTS */, ["onClick", "active"]))
                                  : vue.createCommentVNode("v-if", true)
                              ]),
                              _: 2 /* DYNAMIC */
                            }, 1024 /* DYNAMIC_SLOTS */))
                          }), 128 /* KEYED_FRAGMENT */))
                        ]),
                        _: 2 /* DYNAMIC */
                      }, 1024 /* DYNAMIC_SLOTS */))
                    }), 128 /* KEYED_FRAGMENT */))
                  ]),
                  _: 2 /* DYNAMIC */
                }, 1024 /* DYNAMIC_SLOTS */)
              ]),
              _: 2 /* DYNAMIC */
            }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */)
          ]),
          _: 2 /* DYNAMIC */
        }, [
          clearable
            ? {
                name: "append",
                fn: vue.withCtx(() => [
                  vue.createVNode(_component_v_icon, {
                    size: "small",
                    icon: "mdi-close",
                    onClick: vue.withModifiers($event => (clear()), ["stop"])
                  }, null, 8 /* PROPS */, ["onClick"])
                ])
              }
            : undefined
        ]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */)
      ]),
      _: 1 /* STABLE */
    }, 16 /* FULL_PROPS */))
  }

  script$1.render = render$1;
  script$1.__file = "src/components/CustomSelect.vue";

  var script = {
    name: 'VueCronEditor',
    components: {
      CronCore: CronCore__default["default"].component,
      CustomSelect: script$1
    },
    props: {
      chipProps: {
        type: Object,
        default () {
          return {}
        }
      },
      cols: {
        type: Object,
        default: () => {
          return {
            minute: 5,
            hour: 4,
            day: 4
          }
        }
      }
    },
    emits: ['update:model-value', 'error']
  };

  const _hoisted_1 = { style: {"display":"inline-block"} };

  function render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_v_col = vue.resolveComponent("v-col");
    const _component_custom_select = vue.resolveComponent("custom-select");
    const _component_v_row = vue.resolveComponent("v-row");
    const _component_CronCore = vue.resolveComponent("CronCore");

    return (vue.openBlock(), vue.createBlock(_component_CronCore, vue.mergeProps(_ctx.$attrs, {
      "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => (_ctx.$emit('update:model-value', $event))),
      onError: _cache[1] || (_cache[1] = $event => (_ctx.$emit('error', $event)))
    }), {
      default: vue.withCtx(({fields, period}) => [
        vue.createElementVNode("div", _hoisted_1, [
          vue.createVNode(_component_v_row, {
            align: "baseline",
            dense: ""
          }, {
            default: vue.withCtx(() => [
              (period.prefix)
                ? (vue.openBlock(), vue.createBlock(_component_v_col, {
                    key: 0,
                    class: "flex-grow-0"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createTextVNode(vue.toDisplayString(period.prefix), 1 /* TEXT */)
                    ]),
                    _: 2 /* DYNAMIC */
                  }, 1024 /* DYNAMIC_SLOTS */))
                : vue.createCommentVNode("v-if", true),
              vue.createVNode(_component_v_col, { cols: "auto" }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_custom_select, vue.mergeProps(period.attrs, {
                    items: period.items
                  }, vue.toHandlers(period.events), {
                    "item-value": "id",
                    "chip-props": $props.chipProps
                  }), null, 16 /* FULL_PROPS */, ["items", "chip-props"])
                ]),
                _: 2 /* DYNAMIC */
              }, 1024 /* DYNAMIC_SLOTS */),
              (period.suffix)
                ? (vue.openBlock(), vue.createBlock(_component_v_col, {
                    key: 1,
                    class: "flex-grow-0"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createTextVNode(vue.toDisplayString(period.suffix), 1 /* TEXT */)
                    ]),
                    _: 2 /* DYNAMIC */
                  }, 1024 /* DYNAMIC_SLOTS */))
                : vue.createCommentVNode("v-if", true),
              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(fields, (f) => {
                return (vue.openBlock(), vue.createElementBlock(vue.Fragment, {
                  key: f.id
                }, [
                  (f.prefix)
                    ? (vue.openBlock(), vue.createBlock(_component_v_col, {
                        key: 0,
                        class: "flex-grow-0"
                      }, {
                        default: vue.withCtx(() => [
                          vue.createTextVNode(vue.toDisplayString(f.prefix), 1 /* TEXT */)
                        ]),
                        _: 2 /* DYNAMIC */
                      }, 1024 /* DYNAMIC_SLOTS */))
                    : vue.createCommentVNode("v-if", true),
                  vue.createVNode(_component_v_col, { cols: "auto" }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_custom_select, vue.mergeProps(f.attrs, vue.toHandlers(f.events), {
                        selection: f.selectedStr,
                        cols: $props.cols[f.id],
                        items: f.items,
                        multiple: "",
                        "chip-props": $props.chipProps,
                        "menu-props": { closeOnContentClick: false },
                        clearable: ""
                      }), null, 16 /* FULL_PROPS */, ["selection", "cols", "items", "chip-props"])
                    ]),
                    _: 2 /* DYNAMIC */
                  }, 1024 /* DYNAMIC_SLOTS */),
                  (f.suffix)
                    ? (vue.openBlock(), vue.createBlock(_component_v_col, {
                        key: 1,
                        class: "flex-grow-0"
                      }, {
                        default: vue.withCtx(() => [
                          vue.createTextVNode(vue.toDisplayString(f.suffix), 1 /* TEXT */)
                        ]),
                        _: 2 /* DYNAMIC */
                      }, 1024 /* DYNAMIC_SLOTS */))
                    : vue.createCommentVNode("v-if", true)
                ], 64 /* STABLE_FRAGMENT */))
              }), 128 /* KEYED_FRAGMENT */))
            ]),
            _: 2 /* DYNAMIC */
          }, 1024 /* DYNAMIC_SLOTS */)
        ])
      ]),
      _: 1 /* STABLE */
    }, 16 /* FULL_PROPS */))
  }

  script.render = render;
  script.__file = "src/CronEditor.vue";

  // Import vue component

  // Declare install function executed by Vue.use()
  function install (Vue) {
    if (install.installed) return
    install.installed = true;
    Vue.component('CronVuetify', script);
  }

  // Create module definition for Vue.use()
  const plugin = {
    install,
    component: script,
    util: CronCore__default["default"].util
  };

  exports.CronVuetify = script;
  exports.CronVuetifyPlugin = plugin;
  exports["default"] = plugin;
  exports.install = install;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
